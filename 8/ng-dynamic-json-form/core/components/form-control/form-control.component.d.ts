import { AfterViewInit, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { FormControlConfig } from '../../models';
import { CustomControlComponent } from '../custom-control/custom-control.component';
import * as i0 from "@angular/core";
export declare class FormControlComponent implements OnInit, AfterViewInit, OnDestroy, ControlValueAccessor, Validator {
    private _cd;
    private _destroyRef;
    private _globalVariableService;
    private _formReadyStateService;
    private _optionsDataService;
    private _uiComponents;
    private _controlComponent?;
    private _pendingValue;
    private _onChange;
    private _onTouched;
    data?: FormControlConfig;
    control?: AbstractControl;
    customComponent?: Type<CustomControlComponent>;
    inputComponentAnchor: ViewContainerRef;
    onFocusOut(): void;
    customTemplates: import("../../models").CustomTemplates | undefined;
    loadingComponent: Type<any> | undefined;
    loadingTemplate: import("@angular/core").TemplateRef<any> | undefined;
    loading: boolean;
    useCustomLoading: boolean;
    hostForm: import("@angular/forms").UntypedFormGroup | undefined;
    hideErrorMessage$: import("rxjs").BehaviorSubject<boolean | undefined>;
    writeValue(obj: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState?(isDisabled: boolean): void;
    validate(control: AbstractControl<any, any>): ValidationErrors | null;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    updateControlStatus(status: 'dirty' | 'pristine' | 'touched' | 'untouched', updateSelf?: boolean): void;
    get showErrors(): boolean;
    private _injectComponent;
    private _injectInputComponent;
    private _fetchOptions;
    private _errorMessageEvent;
    private get _inputType();
    static ɵfac: i0.ɵɵFactoryDeclaration<FormControlComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormControlComponent, "form-control", never, { "data": { "alias": "data"; "required": false; }; "control": { "alias": "control"; "required": false; }; "customComponent": { "alias": "customComponent"; "required": false; }; }, {}, never, never, true, never>;
}

import { Injectable, inject, isDevMode } from '@angular/core';
import { EMPTY, Subject, catchError, combineLatest, debounceTime, distinctUntilChanged, map, of, startWith, switchMap, takeUntil, tap, } from 'rxjs';
import { evaluateConditionsStatements } from '../utilities/evaluate-conditions-statements';
import { getControlAndValuePath } from '../utilities/get-control-and-value-path';
import { getValueInObject } from '../utilities/get-value-in-object';
import { trimObjectByKeys } from '../utilities/trim-object-by-keys';
import { GlobalVariableService } from './global-variable.service';
import { HttpRequestCacheService } from './http-request-cache.service';
import * as i0 from "@angular/core";
class OptionsDataService {
    constructor() {
        this._globalVariableService = inject(GlobalVariableService);
        this._httpRequestCacheService = inject(HttpRequestCacheService);
        this._cancelAll$ = new Subject();
    }
    /**
     * @param srcConfig @see OptionSourceConfig
     * @param valueChangesCallback The callback after `valueChanges` is called
     */
    getOptions$(srcConfig, valueChangesCallback) {
        if (!srcConfig) {
            return EMPTY;
        }
        const event$ = () => {
            const valueChanges$ = this._onTriggerControlChanges$(srcConfig.filter || srcConfig.trigger, valueChangesCallback);
            if (srcConfig.filter) {
                return this._getOptionsByFilter$(srcConfig, valueChanges$);
            }
            if (srcConfig.trigger) {
                return this._getOptionsOnTrigger$(srcConfig, valueChanges$);
            }
            return this._getOptions$(srcConfig);
        };
        return event$().pipe(tap((x) => {
            if (isDevMode() && x.length > 100) {
                console.warn(`NgDynamicJsonForm:\nThe data length from the response ${srcConfig.url} is > 100.\n` +
                    `Please make sure there is optimization made. e.g. virtual scroll, lazy loading`);
            }
        }));
    }
    cancelAllRequest() {
        this._cancelAll$.next();
        this._httpRequestCacheService.reset();
    }
    onDestroy() {
        this.cancelAllRequest();
        this._cancelAll$.complete();
    }
    _getOptions$(srcConfig) {
        if (!srcConfig) {
            return EMPTY;
        }
        const { url, method, headers, mapData } = srcConfig;
        const bodyMapped = this._mapBodyValue(srcConfig);
        const src = this._getMappedSrc(url, bodyMapped);
        return this._httpRequestCacheService
            .request$({
            src,
            method,
            headers,
            body: bodyMapped,
        })
            .pipe(map((x) => this._mapData(x, mapData)), catchError(() => of([])), takeUntil(this._cancelAll$));
    }
    _getOptionsByFilter$(srcConfig, valueChanges$) {
        if (!srcConfig.filter)
            return of([]);
        const mapTupleFn = (tuple, triggerValue, optionItem) => {
            const [triggerValuePath, operator, optionValuePath] = tuple;
            return [
                getValueInObject(triggerValue, triggerValuePath),
                operator,
                getValueInObject(optionItem?.value, optionValuePath),
            ];
        };
        const filterOptions$ = this._getOptions$(srcConfig).pipe(switchMap((x) => combineLatest([of(x), valueChanges$])), map(([options, value]) => options.filter((optionItem) => {
            const result = evaluateConditionsStatements(srcConfig.filter.conditions, (e) => mapTupleFn(e, value, optionItem));
            return result;
        })));
        return filterOptions$.pipe(takeUntil(this._cancelAll$));
    }
    _getOptionsOnTrigger$(srcConfig, valueChanges$) {
        if (!srcConfig.trigger)
            return of([]);
        return valueChanges$.pipe(switchMap((x) => {
            const emptyValue = x === undefined || x === null || x === '';
            return emptyValue ? of([]) : this._getOptions$(srcConfig);
        }), takeUntil(this._cancelAll$));
    }
    /**The `valueChanges` of trigger control */
    _onTriggerControlChanges$(triggerConfig, valueChangesCallback) {
        if (!triggerConfig)
            return EMPTY;
        const { by, debounceTime: _debounceTime = 0 } = triggerConfig;
        if (!by.trim())
            return EMPTY;
        const form = this._globalVariableService.rootForm;
        const paths = getControlAndValuePath(by);
        const control = form?.get(paths.controlPath);
        if (!control) {
            if (isDevMode()) {
                console.warn(`Form control ${paths.controlPath} not found.`);
            }
            return EMPTY;
        }
        return control.valueChanges.pipe(startWith(control.value), distinctUntilChanged((a, b) => JSON.stringify(a) === JSON.stringify(b)), tap(() => valueChangesCallback && valueChangesCallback()), debounceTime(_debounceTime), map((x) => (!paths.valuePath ? x : getValueInObject(x, paths.valuePath))));
    }
    _mapData(input, mapData) {
        if (!input)
            return [];
        const { contentPath, slice, labelKey, valueKeys } = mapData ?? {};
        const data = contentPath ? getValueInObject(input, contentPath) : input;
        const filteredValueKeys = [...new Set(valueKeys)].filter(Boolean);
        if (!data || !Array.isArray(data))
            return [];
        const slicedData = data.slice(slice?.[0] ?? 0, slice?.[1] ?? data.length);
        const result = slicedData.map((item) => ({
            label: getValueInObject(item, labelKey),
            value: !filteredValueKeys.length
                ? item
                : trimObjectByKeys(item, filteredValueKeys),
        }));
        return result;
    }
    _getMappedSrc(src, body) {
        // url variables (.../:x/:y/:z)
        const urlVariables = src.match(/:([^/:\s]+)/g) || [];
        if (typeof body !== 'object') {
            return src;
        }
        if (!urlVariables.length) {
            return `${src}?${new URLSearchParams(body).toString()}`;
        }
        return Object.keys(body).reduce((acc, key) => {
            acc = acc.replace(`:${key}`, `${body[key]}`);
            return acc;
        }, src);
    }
    _mapBodyValue(config) {
        if (!config.trigger)
            return config.body;
        const triggerBody = config.trigger.body;
        if (!triggerBody)
            return null;
        const form = this._globalVariableService.rootForm;
        const result = Object.keys(triggerBody).reduce((acc, key) => {
            const { controlPath, valuePath } = getControlAndValuePath(triggerBody[key]);
            const control = form?.get(controlPath);
            const value = getValueInObject(control?.value, valuePath);
            acc[key] = !control ? triggerBody[key] : value;
            return acc;
        }, {});
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: OptionsDataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: OptionsDataService }); }
}
export { OptionsDataService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: OptionsDataService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,
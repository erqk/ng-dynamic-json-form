import { HttpClient } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { Subject, finalize, tap } from 'rxjs';
import * as i0 from "@angular/core";
class HttpRequestCacheService {
    constructor() {
        this._requests = [];
        this._http = inject(HttpClient);
    }
    request$(params) {
        const { src, method, headers, body } = params;
        const source$ = method === 'GET'
            ? this._http.get(src, { headers })
            : this._http.post(src, body ?? {}, { headers });
        const sameRequest = this._prevSameRequest(params);
        if (sameRequest) {
            if (!sameRequest.data$.closed)
                return sameRequest.data$;
            sameRequest.data$ = new Subject();
        }
        else {
            this._requests.push({
                src,
                data$: new Subject(),
                body,
            });
        }
        return source$.pipe(tap((x) => {
            const sameRequest = this._prevSameRequest(params);
            !sameRequest?.data$.closed && sameRequest?.data$.next(x);
        }), finalize(() => {
            const sameRequest = this._prevSameRequest(params);
            sameRequest?.data$.complete();
            sameRequest?.data$.unsubscribe();
        }));
    }
    reset() {
        this._requests
            .filter((x) => !x.data$.closed)
            .forEach(({ data$ }) => {
            data$.next([]);
            data$.complete();
            data$.unsubscribe();
        });
        this._requests = [];
    }
    _prevSameRequest({ src, method, body, }) {
        const result = this._requests.find((x) => {
            if (method === 'POST' && body) {
                const sameBody = JSON.stringify(body) === JSON.stringify(x.body);
                return x.src === src && sameBody;
            }
            return x.src === src;
        });
        return result;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: HttpRequestCacheService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: HttpRequestCacheService }); }
}
export { HttpRequestCacheService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: HttpRequestCacheService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1yZXF1ZXN0LWNhY2hlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvY29yZS9zZXJ2aWNlcy9odHRwLXJlcXVlc3QtY2FjaGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFDL0QsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFjLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDOztBQWUxRCxNQUNhLHVCQUF1QjtJQURwQztRQUVVLGNBQVMsR0FBc0IsRUFBRSxDQUFDO1FBQ2xDLFVBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7S0ErRHBDO0lBN0RDLFFBQVEsQ0FBQyxNQUFxQjtRQUM1QixNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQzlDLE1BQU0sT0FBTyxHQUNYLE1BQU0sS0FBSyxLQUFLO1lBQ2QsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDO1lBQ2xDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxJQUFJLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFFcEQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxELElBQUksV0FBVyxFQUFFO1lBQ2YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTTtnQkFBRSxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDeEQsV0FBVyxDQUFDLEtBQUssR0FBRyxJQUFJLE9BQU8sRUFBVSxDQUFDO1NBQzNDO2FBQU07WUFDTCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztnQkFDbEIsR0FBRztnQkFDSCxLQUFLLEVBQUUsSUFBSSxPQUFPLEVBQVU7Z0JBQzVCLElBQUk7YUFDTCxDQUFDLENBQUM7U0FDSjtRQUVELE9BQU8sT0FBTyxDQUFDLElBQUksQ0FDakIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDUixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDbEQsQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLE1BQU0sSUFBSSxXQUFXLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRCxDQUFDLENBQUMsRUFDRixRQUFRLENBQUMsR0FBRyxFQUFFO1lBQ1osTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xELFdBQVcsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDOUIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsU0FBUzthQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQzthQUM5QixPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDckIsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNmLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNqQixLQUFLLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7UUFFTCxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRU8sZ0JBQWdCLENBQUMsRUFDdkIsR0FBRyxFQUNILE1BQU0sRUFDTixJQUFJLEdBQ1U7UUFDZCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQ3ZDLElBQUksTUFBTSxLQUFLLE1BQU0sSUFBSSxJQUFJLEVBQUU7Z0JBQzdCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pFLE9BQU8sQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDO2FBQ2xDO1lBRUQsT0FBTyxDQUFDLENBQUMsR0FBRyxLQUFLLEdBQUcsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7K0dBaEVVLHVCQUF1QjttSEFBdkIsdUJBQXVCOztTQUF2Qix1QkFBdUI7NEZBQXZCLHVCQUF1QjtrQkFEbkMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSwgaW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBmaW5hbGl6ZSwgdGFwIH0gZnJvbSAncnhqcyc7XG5cbmludGVyZmFjZSBSZXF1ZXN0UmVzcG9uc2Uge1xuICBzcmM6IHN0cmluZztcbiAgZGF0YSQ6IFN1YmplY3Q8T2JqZWN0PjtcbiAgYm9keT86IGFueTtcbn1cblxuaW50ZXJmYWNlIFJlcXVlc3RQYXJhbXMge1xuICBzcmM6IHN0cmluZztcbiAgbWV0aG9kOiAnUE9TVCcgfCAnR0VUJztcbiAgaGVhZGVycz86IGFueTtcbiAgYm9keT86IGFueTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEh0dHBSZXF1ZXN0Q2FjaGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfcmVxdWVzdHM6IFJlcXVlc3RSZXNwb25zZVtdID0gW107XG4gIHByaXZhdGUgX2h0dHAgPSBpbmplY3QoSHR0cENsaWVudCk7XG5cbiAgcmVxdWVzdCQocGFyYW1zOiBSZXF1ZXN0UGFyYW1zKTogT2JzZXJ2YWJsZTxPYmplY3Q+IHtcbiAgICBjb25zdCB7IHNyYywgbWV0aG9kLCBoZWFkZXJzLCBib2R5IH0gPSBwYXJhbXM7XG4gICAgY29uc3Qgc291cmNlJCA9XG4gICAgICBtZXRob2QgPT09ICdHRVQnXG4gICAgICAgID8gdGhpcy5faHR0cC5nZXQoc3JjLCB7IGhlYWRlcnMgfSlcbiAgICAgICAgOiB0aGlzLl9odHRwLnBvc3Qoc3JjLCBib2R5ID8/IHt9LCB7IGhlYWRlcnMgfSk7XG5cbiAgICBjb25zdCBzYW1lUmVxdWVzdCA9IHRoaXMuX3ByZXZTYW1lUmVxdWVzdChwYXJhbXMpO1xuXG4gICAgaWYgKHNhbWVSZXF1ZXN0KSB7XG4gICAgICBpZiAoIXNhbWVSZXF1ZXN0LmRhdGEkLmNsb3NlZCkgcmV0dXJuIHNhbWVSZXF1ZXN0LmRhdGEkO1xuICAgICAgc2FtZVJlcXVlc3QuZGF0YSQgPSBuZXcgU3ViamVjdDxPYmplY3Q+KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3JlcXVlc3RzLnB1c2goe1xuICAgICAgICBzcmMsXG4gICAgICAgIGRhdGEkOiBuZXcgU3ViamVjdDxPYmplY3Q+KCksXG4gICAgICAgIGJvZHksXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gc291cmNlJC5waXBlKFxuICAgICAgdGFwKCh4KSA9PiB7XG4gICAgICAgIGNvbnN0IHNhbWVSZXF1ZXN0ID0gdGhpcy5fcHJldlNhbWVSZXF1ZXN0KHBhcmFtcyk7XG4gICAgICAgICFzYW1lUmVxdWVzdD8uZGF0YSQuY2xvc2VkICYmIHNhbWVSZXF1ZXN0Py5kYXRhJC5uZXh0KHgpO1xuICAgICAgfSksXG4gICAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNhbWVSZXF1ZXN0ID0gdGhpcy5fcHJldlNhbWVSZXF1ZXN0KHBhcmFtcyk7XG4gICAgICAgIHNhbWVSZXF1ZXN0Py5kYXRhJC5jb21wbGV0ZSgpO1xuICAgICAgICBzYW1lUmVxdWVzdD8uZGF0YSQudW5zdWJzY3JpYmUoKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMuX3JlcXVlc3RzXG4gICAgICAuZmlsdGVyKCh4KSA9PiAheC5kYXRhJC5jbG9zZWQpXG4gICAgICAuZm9yRWFjaCgoeyBkYXRhJCB9KSA9PiB7XG4gICAgICAgIGRhdGEkLm5leHQoW10pO1xuICAgICAgICBkYXRhJC5jb21wbGV0ZSgpO1xuICAgICAgICBkYXRhJC51bnN1YnNjcmliZSgpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdO1xuICB9XG5cbiAgcHJpdmF0ZSBfcHJldlNhbWVSZXF1ZXN0KHtcbiAgICBzcmMsXG4gICAgbWV0aG9kLFxuICAgIGJvZHksXG4gIH06IFJlcXVlc3RQYXJhbXMpOiBSZXF1ZXN0UmVzcG9uc2UgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX3JlcXVlc3RzLmZpbmQoKHgpID0+IHtcbiAgICAgIGlmIChtZXRob2QgPT09ICdQT1NUJyAmJiBib2R5KSB7XG4gICAgICAgIGNvbnN0IHNhbWVCb2R5ID0gSlNPTi5zdHJpbmdpZnkoYm9keSkgPT09IEpTT04uc3RyaW5naWZ5KHguYm9keSk7XG4gICAgICAgIHJldHVybiB4LnNyYyA9PT0gc3JjICYmIHNhbWVCb2R5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geC5zcmMgPT09IHNyYztcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==
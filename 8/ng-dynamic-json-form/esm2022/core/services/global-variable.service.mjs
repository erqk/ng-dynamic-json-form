import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
class GlobalVariableService {
    constructor() {
        this.hideErrorMessage$ = new BehaviorSubject(undefined);
        this.rootConfigs = [];
        this.showErrorsOnTouched = true;
    }
    // ======================================================================
    setup(variables) {
        for (const key in variables) {
            this[key] = variables[key];
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GlobalVariableService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GlobalVariableService }); }
}
export { GlobalVariableService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: GlobalVariableService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYmFsLXZhcmlhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvY29yZS9zZXJ2aWNlcy9nbG9iYWwtdmFyaWFibGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBV3ZDLE1BQ2EscUJBQXFCO0lBRGxDO1FBR0Usc0JBQWlCLEdBQUcsSUFBSSxlQUFlLENBQXNCLFNBQVMsQ0FBQyxDQUFDO1FBQ3hFLGdCQUFXLEdBQXdCLEVBQUUsQ0FBQztRQUV0Qyx3QkFBbUIsR0FBRyxJQUFJLENBQUM7S0F3QzVCO0lBUEMseUVBQXlFO0lBRXpFLEtBQUssQ0FBQyxTQUEwQjtRQUM5QixLQUFLLE1BQU0sR0FBRyxJQUFJLFNBQVMsRUFBRTtZQUMxQixJQUFZLENBQUMsR0FBRyxDQUFDLEdBQUksU0FBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUM5QztJQUNILENBQUM7K0dBNUNVLHFCQUFxQjttSEFBckIscUJBQXFCOztTQUFyQixxQkFBcUI7NEZBQXJCLHFCQUFxQjtrQkFEakMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVudHlwZWRGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZvcm1Db250cm9sQ29uZmlnLCBGb3JtTGF5b3V0LCBVaUNvbXBvbmVudHMgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgQ3VzdG9tQXN5bmNWYWxpZGF0b3JzIH0gZnJvbSAnLi4vbW9kZWxzL2N1c3RvbS1hc3luYy12YWxpZGF0b3JzLnR5cGUnO1xuaW1wb3J0IHsgQ3VzdG9tVmFsaWRhdG9ycyB9IGZyb20gJy4uL21vZGVscy9jdXN0b20tdmFsaWRhdG9ycy50eXBlJztcbmltcG9ydCB7IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50IH0gZnJvbSAnLi4vbmctZHluYW1pYy1qc29uLWZvcm0uY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1Db25maWcgfSBmcm9tICcuLi9wcm92aWRlcnMvbmctZHluYW1pYy1qc29uLWZvcm0ucHJvdmlkZXInO1xuaW50ZXJmYWNlIEdsb2JhbFZhcmlhYmxlc1xuICBleHRlbmRzIE9taXQ8XG4gICAgR2xvYmFsVmFyaWFibGVTZXJ2aWNlLFxuICAgICdzZXR1cCcgfCAncm9vdENvbmZpZ3MnIHwgJ3Jvb3RGb3JtJyB8ICdoaWRlRXJyb3JNZXNzYWdlJCdcbiAgPiB7fVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdsb2JhbFZhcmlhYmxlU2VydmljZSB7XG4gIGRlc2NyaXB0aW9uUG9zaXRpb24/OiBGb3JtTGF5b3V0WydkZXNjcmlwdGlvblBvc2l0aW9uJ107XG4gIGhpZGVFcnJvck1lc3NhZ2UkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuICByb290Q29uZmlnczogRm9ybUNvbnRyb2xDb25maWdbXSA9IFtdO1xuICByb290Rm9ybT86IFVudHlwZWRGb3JtR3JvdXA7XG4gIHNob3dFcnJvcnNPblRvdWNoZWQgPSB0cnVlO1xuXG4gIC8vID09PT09PT09PT09PT09PSBUaGUgdmFyaWFibGVzIHRoYXQgbXVzdCBiZSBpbml0aWFsaXplZCA9PT09PT09PT09PT09PT1cbiAgaG9zdEVsZW1lbnQ/OiBIVE1MRWxlbWVudDtcbiAgY29uZGl0aW9uc0FjdGlvbkZ1bmN0aW9uczogTmdEeW5hbWljSnNvbkZvcm1Db21wb25lbnRbJ2NvbmRpdGlvbnNBY3Rpb25GdW5jdGlvbnMnXTtcbiAgb3B0aW9uc1NvdXJjZXM6IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50WydvcHRpb25zU291cmNlcyddO1xuICB1aUNvbXBvbmVudHM6IFVpQ29tcG9uZW50cyB8IHVuZGVmaW5lZDtcbiAgY3VzdG9tQXN5bmNWYWxpZGF0b3JzOiBDdXN0b21Bc3luY1ZhbGlkYXRvcnMgfCB1bmRlZmluZWQ7XG4gIGN1c3RvbVZhbGlkYXRvcnM6IEN1c3RvbVZhbGlkYXRvcnMgfCB1bmRlZmluZWQ7XG4gIGN1c3RvbUNvbXBvbmVudHM6IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50WydjdXN0b21Db21wb25lbnRzJ107XG4gIGN1c3RvbVRlbXBsYXRlczogTmdEeW5hbWljSnNvbkZvcm1Db21wb25lbnRbJ2N1c3RvbVRlbXBsYXRlcyddO1xuXG4gIC8vIEN1c3RvbSBlcnJvclxuICBlcnJvckNvbXBvbmVudHM6IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50WydlcnJvckNvbXBvbmVudHMnXTtcbiAgZXJyb3JUZW1wbGF0ZXM6IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50WydlcnJvclRlbXBsYXRlcyddO1xuICBlcnJvclRlbXBsYXRlRGVmYXVsdDogTmdEeW5hbWljSnNvbkZvcm1Db21wb25lbnRbJ2Vycm9yVGVtcGxhdGVEZWZhdWx0J107XG4gIGVycm9yQ29tcG9uZW50RGVmYXVsdDogTmdEeW5hbWljSnNvbkZvcm1Db21wb25lbnRbJ2Vycm9yQ29tcG9uZW50RGVmYXVsdCddO1xuXG4gIC8vIEN1c3RvbSBsYWJlbFxuICBsYWJlbENvbXBvbmVudHM6IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50WydsYWJlbENvbXBvbmVudHMnXTtcbiAgbGFiZWxUZW1wbGF0ZXM6IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50WydsYWJlbFRlbXBsYXRlcyddO1xuICBsYWJlbFRlbXBsYXRlRGVmYXVsdDogTmdEeW5hbWljSnNvbkZvcm1Db21wb25lbnRbJ2xhYmVsVGVtcGxhdGVEZWZhdWx0J107XG5cbiAgLy8gQ3VzdG9tIGxvYWRpbmdcbiAgbGFiZWxDb21wb25lbnREZWZhdWx0OiBOZ0R5bmFtaWNKc29uRm9ybUNvbXBvbmVudFsnbGFiZWxDb21wb25lbnREZWZhdWx0J107XG4gIGxvYWRpbmdDb21wb25lbnQ6IE5nRHluYW1pY0pzb25Gb3JtQ29tcG9uZW50Wydsb2FkaW5nQ29tcG9uZW50J107XG4gIGxvYWRpbmdUZW1wbGF0ZTogTmdEeW5hbWljSnNvbkZvcm1Db21wb25lbnRbJ2xvYWRpbmdUZW1wbGF0ZSddO1xuXG4gIC8vIEhpZGUgZXJyb3IgbWVzc2FnZVxuICBoaWRlRXJyb3JzRm9yVHlwZXM6IEZvcm1Db25maWdbJ2hpZGVFcnJvcnNGb3JUeXBlcyddO1xuXG4gIC8vIEdsb2JhbCB2YWxpZGF0aW9uIG1lc3NhZ2VzXG4gIHZhbGlkYXRpb25NZXNzYWdlczogRm9ybUNvbmZpZ1sndmFsaWRhdGlvbk1lc3NhZ2VzJ107XG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICBzZXR1cCh2YXJpYWJsZXM6IEdsb2JhbFZhcmlhYmxlcyk6IHZvaWQge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHZhcmlhYmxlcykge1xuICAgICAgKHRoaXMgYXMgYW55KVtrZXldID0gKHZhcmlhYmxlcyBhcyBhbnkpW2tleV07XG4gICAgfVxuICB9XG59XG4iXX0=
import { CommonModule } from '@angular/common';
import { Component } from '@angular/core';
import { FormControl, ReactiveFormsModule } from '@angular/forms';
import { CustomControlComponent } from '../../components/custom-control/custom-control.component';
import { PropsBindingDirective } from '../../directives';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
class UiBasicRangeComponent extends CustomControlComponent {
    constructor() {
        super(...arguments);
        this.control = new FormControl(0);
        this.tickMarks = [];
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    ngOnInit() {
        this._getTickMarksCount();
    }
    get valuePosition() {
        const min = this.data?.props?.min ?? 0;
        const max = this.data?.props?.max ?? 0;
        return `${((this.control.value - min) / (max - min)) * 100}%`;
    }
    _getTickMarksCount() {
        if (!this.data?.props || !this.data.props.showTickMarks) {
            return;
        }
        const diff = (this.data.props.max ?? 1) - (this.data.props.min ?? 1);
        const steps = this.data.props.step ?? 1;
        if (diff === 0)
            return;
        this.tickMarks = Array.from(Array(Math.ceil(diff / steps) + 1).keys()).map((x, i) => i);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UiBasicRangeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: UiBasicRangeComponent, isStandalone: true, selector: "ui-basic-range", host: { classAttribute: "ui-basic" }, usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"data\">\n  <div\n    class=\"range-input\"\n    [ngClass]=\"{\n      'show-tick-marks':\n        data.props?.showTickMarks === true ||\n        data.props?.showCurrentValue === true,\n      disabled: control.disabled\n    }\"\n  >\n    <input\n      type=\"range\"\n      [ngStyle]=\"{\n        'background-size': valuePosition\n      }\"\n      [propsBinding]=\"[\n        {\n          props: data.props,\n          omit: ['type']\n        }\n      ]\"\n      [formControl]=\"control\"\n      (input)=\"onChange(control.value)\"\n    />\n\n    <ng-container *ngIf=\"data.props?.showCurrentValue\">\n      <div class=\"current-value\" [style.--left]=\"valuePosition\">\n        {{ control.value }}\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"data.props?.showTickMarks\">\n      <div class=\"tick-marks-container\">\n        <ng-container *ngFor=\"let mark of tickMarks; index as i\">\n          <span class=\"tick-mark\"></span>\n        </ng-container>\n      </div>\n\n      <div class=\"min-number\">{{ data.props?.min }}</div>\n      <div class=\"max-number\">{{ data.props?.max }}</div>\n    </ng-container>\n  </div>\n</ng-container>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: PropsBindingDirective, selector: "[propsBinding]", inputs: ["propsBinding"] }] }); }
}
export { UiBasicRangeComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: UiBasicRangeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ui-basic-range', standalone: true, imports: [CommonModule, ReactiveFormsModule, PropsBindingDirective], host: {
                        class: 'ui-basic',
                    }, template: "<ng-container *ngIf=\"data\">\n  <div\n    class=\"range-input\"\n    [ngClass]=\"{\n      'show-tick-marks':\n        data.props?.showTickMarks === true ||\n        data.props?.showCurrentValue === true,\n      disabled: control.disabled\n    }\"\n  >\n    <input\n      type=\"range\"\n      [ngStyle]=\"{\n        'background-size': valuePosition\n      }\"\n      [propsBinding]=\"[\n        {\n          props: data.props,\n          omit: ['type']\n        }\n      ]\"\n      [formControl]=\"control\"\n      (input)=\"onChange(control.value)\"\n    />\n\n    <ng-container *ngIf=\"data.props?.showCurrentValue\">\n      <div class=\"current-value\" [style.--left]=\"valuePosition\">\n        {{ control.value }}\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"data.props?.showTickMarks\">\n      <div class=\"tick-marks-container\">\n        <ng-container *ngFor=\"let mark of tickMarks; index as i\">\n          <span class=\"tick-mark\"></span>\n        </ng-container>\n      </div>\n\n      <div class=\"min-number\">{{ data.props?.min }}</div>\n      <div class=\"max-number\">{{ data.props?.max }}</div>\n    </ng-container>\n  </div>\n</ng-container>\n" }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktYmFzaWMtcmFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGliL2NvcmUvdWktYmFzaWMvdWktYmFzaWMtcmFuZ2UvdWktYmFzaWMtcmFuZ2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbGliL2NvcmUvdWktYmFzaWMvdWktYmFzaWMtcmFuZ2UvdWktYmFzaWMtcmFuZ2UuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBEQUEwRCxDQUFDO0FBQ2xHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBRXpELE1BVWEscUJBQXNCLFNBQVEsc0JBQXNCO0lBVmpFOztRQVdXLFlBQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxjQUFTLEdBQVUsRUFBRSxDQUFDO0tBZ0N2QjtJQTVCVSxnQkFBZ0IsQ0FBQyxFQUFPO1FBQy9CLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUV2QyxPQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakUsQ0FBQztJQUVPLGtCQUFrQjtRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUU7WUFDdkQsT0FBTztTQUNSO1FBRUQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDckUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztRQUN4QyxJQUFJLElBQUksS0FBSyxDQUFDO1lBQUUsT0FBTztRQUV2QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUN4RSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FDWixDQUFDO0lBQ0osQ0FBQzsrR0FqQ1UscUJBQXFCO21HQUFyQixxQkFBcUIsdUlDaEJsQyxpcUNBMkNBLDJDRGxDWSxZQUFZLGtiQUFFLG1CQUFtQix3dUJBQUUscUJBQXFCOztTQU92RCxxQkFBcUI7NEZBQXJCLHFCQUFxQjtrQkFWakMsU0FBUzsrQkFDRSxnQkFBZ0IsY0FDZCxJQUFJLFdBQ1AsQ0FBQyxZQUFZLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLENBQUMsUUFHN0Q7d0JBQ0osS0FBSyxFQUFFLFVBQVU7cUJBQ2xCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFJlYWN0aXZlRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBDdXN0b21Db250cm9sQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY29tcG9uZW50cy9jdXN0b20tY29udHJvbC9jdXN0b20tY29udHJvbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgUHJvcHNCaW5kaW5nRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3VpLWJhc2ljLXJhbmdlJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSwgUHJvcHNCaW5kaW5nRGlyZWN0aXZlXSxcbiAgdGVtcGxhdGVVcmw6ICcuL3VpLWJhc2ljLXJhbmdlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVzOiBbXSxcbiAgaG9zdDoge1xuICAgIGNsYXNzOiAndWktYmFzaWMnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBVaUJhc2ljUmFuZ2VDb21wb25lbnQgZXh0ZW5kcyBDdXN0b21Db250cm9sQ29tcG9uZW50IHtcbiAgb3ZlcnJpZGUgY29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgwKTtcbiAgdGlja01hcmtzOiBhbnlbXSA9IFtdO1xuXG4gIG9uQ2hhbmdlPzogYW55O1xuXG4gIG92ZXJyaWRlIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSk6IHZvaWQge1xuICAgIHRoaXMub25DaGFuZ2UgPSBmbjtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIHRoaXMuX2dldFRpY2tNYXJrc0NvdW50KCk7XG4gIH1cblxuICBnZXQgdmFsdWVQb3NpdGlvbigpOiBzdHJpbmcge1xuICAgIGNvbnN0IG1pbiA9IHRoaXMuZGF0YT8ucHJvcHM/Lm1pbiA/PyAwO1xuICAgIGNvbnN0IG1heCA9IHRoaXMuZGF0YT8ucHJvcHM/Lm1heCA/PyAwO1xuXG4gICAgcmV0dXJuIGAkeygodGhpcy5jb250cm9sLnZhbHVlISAtIG1pbikgLyAobWF4IC0gbWluKSkgKiAxMDB9JWA7XG4gIH1cblxuICBwcml2YXRlIF9nZXRUaWNrTWFya3NDb3VudCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGF0YT8ucHJvcHMgfHwgIXRoaXMuZGF0YS5wcm9wcy5zaG93VGlja01hcmtzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZGlmZiA9ICh0aGlzLmRhdGEucHJvcHMubWF4ID8/IDEpIC0gKHRoaXMuZGF0YS5wcm9wcy5taW4gPz8gMSk7XG4gICAgY29uc3Qgc3RlcHMgPSB0aGlzLmRhdGEucHJvcHMuc3RlcCA/PyAxO1xuICAgIGlmIChkaWZmID09PSAwKSByZXR1cm47XG5cbiAgICB0aGlzLnRpY2tNYXJrcyA9IEFycmF5LmZyb20oQXJyYXkoTWF0aC5jZWlsKGRpZmYgLyBzdGVwcykgKyAxKS5rZXlzKCkpLm1hcChcbiAgICAgICh4LCBpKSA9PiBpXG4gICAgKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cImRhdGFcIj5cbiAgPGRpdlxuICAgIGNsYXNzPVwicmFuZ2UtaW5wdXRcIlxuICAgIFtuZ0NsYXNzXT1cIntcbiAgICAgICdzaG93LXRpY2stbWFya3MnOlxuICAgICAgICBkYXRhLnByb3BzPy5zaG93VGlja01hcmtzID09PSB0cnVlIHx8XG4gICAgICAgIGRhdGEucHJvcHM/LnNob3dDdXJyZW50VmFsdWUgPT09IHRydWUsXG4gICAgICBkaXNhYmxlZDogY29udHJvbC5kaXNhYmxlZFxuICAgIH1cIlxuICA+XG4gICAgPGlucHV0XG4gICAgICB0eXBlPVwicmFuZ2VcIlxuICAgICAgW25nU3R5bGVdPVwie1xuICAgICAgICAnYmFja2dyb3VuZC1zaXplJzogdmFsdWVQb3NpdGlvblxuICAgICAgfVwiXG4gICAgICBbcHJvcHNCaW5kaW5nXT1cIltcbiAgICAgICAge1xuICAgICAgICAgIHByb3BzOiBkYXRhLnByb3BzLFxuICAgICAgICAgIG9taXQ6IFsndHlwZSddXG4gICAgICAgIH1cbiAgICAgIF1cIlxuICAgICAgW2Zvcm1Db250cm9sXT1cImNvbnRyb2xcIlxuICAgICAgKGlucHV0KT1cIm9uQ2hhbmdlKGNvbnRyb2wudmFsdWUpXCJcbiAgICAvPlxuXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImRhdGEucHJvcHM/LnNob3dDdXJyZW50VmFsdWVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjdXJyZW50LXZhbHVlXCIgW3N0eWxlLi0tbGVmdF09XCJ2YWx1ZVBvc2l0aW9uXCI+XG4gICAgICAgIHt7IGNvbnRyb2wudmFsdWUgfX1cbiAgICAgIDwvZGl2PlxuICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cImRhdGEucHJvcHM/LnNob3dUaWNrTWFya3NcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0aWNrLW1hcmtzLWNvbnRhaW5lclwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBtYXJrIG9mIHRpY2tNYXJrczsgaW5kZXggYXMgaVwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidGljay1tYXJrXCI+PC9zcGFuPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwibWluLW51bWJlclwiPnt7IGRhdGEucHJvcHM/Lm1pbiB9fTwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1heC1udW1iZXJcIj57eyBkYXRhLnByb3BzPy5tYXggfX08L2Rpdj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==
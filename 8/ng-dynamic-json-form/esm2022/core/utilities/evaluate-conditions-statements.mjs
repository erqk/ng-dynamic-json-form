import { evaluateBooleanOperation } from './get-boolean-operation-result';
export function evaluateConditionsStatements(conditionsGroup, mapTuppleFn) {
    if (!conditionsGroup['&&'] && !conditionsGroup['||']) {
        return undefined;
    }
    const groupOperator = conditionsGroup['&&'] ? '&&' : '||';
    const conditionsGroupItems = conditionsGroup[groupOperator];
    const childrenStatementsResult = conditionsGroupItems
        .filter((x) => !Array.isArray(x))
        .map((x) => x)
        .map((x) => evaluateConditionsStatements(x, mapTuppleFn));
    const statementsResult = conditionsGroupItems
        .filter((x) => Array.isArray(x))
        .map((x) => x)
        .map((x) => {
        const [left, operator, right] = mapTuppleFn(x);
        const result = evaluateBooleanOperation([left, operator, right]);
        return result;
    });
    const bools = childrenStatementsResult
        .concat(statementsResult)
        .filter((x) => x !== undefined);
    return groupOperator === '&&' ? bools.every(Boolean) : bools.some(Boolean);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGUtY29uZGl0aW9ucy1zdGF0ZW1lbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGliL2NvcmUvdXRpbGl0aWVzL2V2YWx1YXRlLWNvbmRpdGlvbnMtc3RhdGVtZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUUxRSxNQUFNLFVBQVUsNEJBQTRCLENBQzFDLGVBQWdDLEVBQ2hDLFdBQTJFO0lBRTNFLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDcEQsT0FBTyxTQUFTLENBQUM7S0FDbEI7SUFFRCxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFELE1BQU0sb0JBQW9CLEdBQUcsZUFBZSxDQUFDLGFBQWEsQ0FBRSxDQUFDO0lBRTdELE1BQU0sd0JBQXdCLEdBQUcsb0JBQW9CO1NBQ2xELE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBb0IsQ0FBQztTQUNoQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLDRCQUE0QixDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBRTVELE1BQU0sZ0JBQWdCLEdBQUcsb0JBQW9CO1NBQzFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQTZCLENBQUM7U0FDekMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDVCxNQUFNLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxNQUFNLEdBQUcsd0JBQXdCLENBQUMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFakUsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFFTCxNQUFNLEtBQUssR0FBRyx3QkFBd0I7U0FDbkMsTUFBTSxDQUFDLGdCQUFnQixDQUFDO1NBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQyxDQUFDO0lBRWxDLE9BQU8sYUFBYSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM3RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uZGl0aW9uc0dyb3VwLCBDb25kaXRpb25zU3RhdGVtZW50VHVwbGUgfSBmcm9tICcuLi9tb2RlbHMnO1xuaW1wb3J0IHsgZXZhbHVhdGVCb29sZWFuT3BlcmF0aW9uIH0gZnJvbSAnLi9nZXQtYm9vbGVhbi1vcGVyYXRpb24tcmVzdWx0JztcblxuZXhwb3J0IGZ1bmN0aW9uIGV2YWx1YXRlQ29uZGl0aW9uc1N0YXRlbWVudHMoXG4gIGNvbmRpdGlvbnNHcm91cDogQ29uZGl0aW9uc0dyb3VwLFxuICBtYXBUdXBwbGVGbjogKHR1cHBsZTogQ29uZGl0aW9uc1N0YXRlbWVudFR1cGxlKSA9PiBDb25kaXRpb25zU3RhdGVtZW50VHVwbGVcbik6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuICBpZiAoIWNvbmRpdGlvbnNHcm91cFsnJiYnXSAmJiAhY29uZGl0aW9uc0dyb3VwWyd8fCddKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbnN0IGdyb3VwT3BlcmF0b3IgPSBjb25kaXRpb25zR3JvdXBbJyYmJ10gPyAnJiYnIDogJ3x8JztcbiAgY29uc3QgY29uZGl0aW9uc0dyb3VwSXRlbXMgPSBjb25kaXRpb25zR3JvdXBbZ3JvdXBPcGVyYXRvcl0hO1xuXG4gIGNvbnN0IGNoaWxkcmVuU3RhdGVtZW50c1Jlc3VsdCA9IGNvbmRpdGlvbnNHcm91cEl0ZW1zXG4gICAgLmZpbHRlcigoeCkgPT4gIUFycmF5LmlzQXJyYXkoeCkpXG4gICAgLm1hcCgoeCkgPT4geCBhcyBDb25kaXRpb25zR3JvdXApXG4gICAgLm1hcCgoeCkgPT4gZXZhbHVhdGVDb25kaXRpb25zU3RhdGVtZW50cyh4LCBtYXBUdXBwbGVGbikpO1xuXG4gIGNvbnN0IHN0YXRlbWVudHNSZXN1bHQgPSBjb25kaXRpb25zR3JvdXBJdGVtc1xuICAgIC5maWx0ZXIoKHgpID0+IEFycmF5LmlzQXJyYXkoeCkpXG4gICAgLm1hcCgoeCkgPT4geCBhcyBDb25kaXRpb25zU3RhdGVtZW50VHVwbGUpXG4gICAgLm1hcCgoeCkgPT4ge1xuICAgICAgY29uc3QgW2xlZnQsIG9wZXJhdG9yLCByaWdodF0gPSBtYXBUdXBwbGVGbih4KTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGV2YWx1YXRlQm9vbGVhbk9wZXJhdGlvbihbbGVmdCwgb3BlcmF0b3IsIHJpZ2h0XSk7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgY29uc3QgYm9vbHMgPSBjaGlsZHJlblN0YXRlbWVudHNSZXN1bHRcbiAgICAuY29uY2F0KHN0YXRlbWVudHNSZXN1bHQpXG4gICAgLmZpbHRlcigoeCkgPT4geCAhPT0gdW5kZWZpbmVkKTtcblxuICByZXR1cm4gZ3JvdXBPcGVyYXRvciA9PT0gJyYmJyA/IGJvb2xzLmV2ZXJ5KEJvb2xlYW4pIDogYm9vbHMuc29tZShCb29sZWFuKTtcbn1cbiJdfQ==
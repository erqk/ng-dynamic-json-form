import { CommonModule } from '@angular/common';
import { Component, ElementRef, Input, ViewChildren, inject, } from '@angular/core';
import { ReactiveFormsModule, UntypedFormGroup } from '@angular/forms';
import { getClassListFromString } from '../../../core/utilities/get-class-list-from-string';
import { getStyleListFromString } from '../../../core/utilities/get-style-list-from-string';
import { ControlLayoutDirective } from '../../directives/control-layout.directive';
import { HostIdDirective } from '../../directives/host-id.directive';
import { ControlTypeByConfigPipe } from '../../pipes/control-type-by-config.pipe';
import { GlobalVariableService } from '../../services/global-variable.service';
import { ContentWrapperComponent } from '../content-wrapper/content-wrapper.component';
import { FormControlComponent } from '../form-control/form-control.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
class FormGroupComponent {
    constructor() {
        this._el = inject(ElementRef);
        this._globalVariableService = inject(GlobalVariableService);
        this.parentForm = new UntypedFormGroup({});
        this.customComponents = this._globalVariableService.customComponents;
    }
    ngOnChanges(changes) {
        const host = this._el.nativeElement;
        const { rootClass, rootStyles } = changes;
        if (rootClass) {
            const classList = getClassListFromString(rootClass.currentValue);
            host.classList.add(...classList);
        }
        if (rootStyles) {
            const styleList = getStyleListFromString(rootStyles.currentValue);
            for (const item of styleList) {
                const [name, value] = item.split(':');
                host.style.setProperty(name, value);
            }
        }
    }
    updateStatus(status) {
        this.formControlRefs?.forEach((x) => x.updateControlStatus(status, true));
        this.formGroupRefs?.forEach((x) => x.updateStatus(status));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FormGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: FormGroupComponent, isStandalone: true, selector: "form-group", inputs: { configs: "configs", collapsibleState: "collapsibleState", parentId: "parentId", parentForm: "parentForm", rootClass: "rootClass", rootStyles: "rootStyles" }, host: { classAttribute: "grid-container form-group-container" }, viewQueries: [{ propertyName: "formGroupRefs", predicate: FormGroupComponent, descendants: true }, { propertyName: "formControlRefs", predicate: FormControlComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: "<ng-container [formGroup]=\"parentForm\">\n  <ng-container *ngFor=\"let item of configs\">\n    <ng-container *ngIf=\"!item.hidden\">\n      <ng-container\n        *ngIf=\"parentForm?.controls?.[item.formControlName] as targetControl\"\n      >\n        <content-wrapper\n          style=\"display: block\"\n          [config]=\"item\"\n          [control]=\"targetControl\"\n          [collapsibleState]=\"collapsibleState\"\n          [controlLayout]=\"{\n            type: 'host',\n            layout: item.layout\n          }\"\n          [hostId]=\"{\n            parentId,\n            controlName: item.formControlName,\n          }\"\n          [ngClass]=\"{\n            'form-control-container': (item | controlTypeByConfig) === 'FormControl',\n            readonly: item.readonly,\n          }\"\n        >\n          <!-- FormControl -->\n          <ng-container *ngIf=\"(item | controlTypeByConfig) === 'FormControl'\">\n            <form-control\n              [data]=\"item\"\n              [control]=\"targetControl\"\n              [formControlName]=\"item.formControlName\"\n              [customComponent]=\"customComponents?.[item.formControlName]\"\n              [controlLayout]=\"{\n                type: 'inputArea',\n                layout: item.layout\n              }\"\n            ></form-control>\n          </ng-container>\n\n          <!-- FormGroup -->\n          <ng-container *ngIf=\"(item | controlTypeByConfig) === 'FormGroup'\">\n            <form-group\n              [parentId]=\"\n                (parentId ? parentId + '.' : '') + item.formControlName\n              \"\n              [parentForm]=\"$any(targetControl)\"\n              [configs]=\"item.children\"\n              [collapsibleState]=\"collapsibleState\"\n              [controlLayout]=\"{\n                type: 'formGroup',\n                layout: item.layout\n              }\"\n            ></form-group>\n          </ng-container>\n        </content-wrapper>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-container>\n", dependencies: [{ kind: "component", type: FormGroupComponent, selector: "form-group", inputs: ["configs", "collapsibleState", "parentId", "parentForm", "rootClass", "rootStyles"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i2.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i2.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "component", type: ContentWrapperComponent, selector: "content-wrapper", inputs: ["config", "control", "collapsibleState"] }, { kind: "directive", type: HostIdDirective, selector: "[hostId]", inputs: ["hostId"] }, { kind: "directive", type: ControlLayoutDirective, selector: "[controlLayout]", inputs: ["controlLayout"] }, { kind: "component", type: FormControlComponent, selector: "form-control", inputs: ["data", "control", "customComponent"] }, { kind: "pipe", type: ControlTypeByConfigPipe, name: "controlTypeByConfig" }] }); }
}
export { FormGroupComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: FormGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'form-group', standalone: true, imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        ContentWrapperComponent,
                        HostIdDirective,
                        ControlLayoutDirective,
                        FormControlComponent,
                        ControlTypeByConfigPipe,
                    ], host: {
                        class: 'grid-container form-group-container',
                    }, template: "<ng-container [formGroup]=\"parentForm\">\n  <ng-container *ngFor=\"let item of configs\">\n    <ng-container *ngIf=\"!item.hidden\">\n      <ng-container\n        *ngIf=\"parentForm?.controls?.[item.formControlName] as targetControl\"\n      >\n        <content-wrapper\n          style=\"display: block\"\n          [config]=\"item\"\n          [control]=\"targetControl\"\n          [collapsibleState]=\"collapsibleState\"\n          [controlLayout]=\"{\n            type: 'host',\n            layout: item.layout\n          }\"\n          [hostId]=\"{\n            parentId,\n            controlName: item.formControlName,\n          }\"\n          [ngClass]=\"{\n            'form-control-container': (item | controlTypeByConfig) === 'FormControl',\n            readonly: item.readonly,\n          }\"\n        >\n          <!-- FormControl -->\n          <ng-container *ngIf=\"(item | controlTypeByConfig) === 'FormControl'\">\n            <form-control\n              [data]=\"item\"\n              [control]=\"targetControl\"\n              [formControlName]=\"item.formControlName\"\n              [customComponent]=\"customComponents?.[item.formControlName]\"\n              [controlLayout]=\"{\n                type: 'inputArea',\n                layout: item.layout\n              }\"\n            ></form-control>\n          </ng-container>\n\n          <!-- FormGroup -->\n          <ng-container *ngIf=\"(item | controlTypeByConfig) === 'FormGroup'\">\n            <form-group\n              [parentId]=\"\n                (parentId ? parentId + '.' : '') + item.formControlName\n              \"\n              [parentForm]=\"$any(targetControl)\"\n              [configs]=\"item.children\"\n              [collapsibleState]=\"collapsibleState\"\n              [controlLayout]=\"{\n                type: 'formGroup',\n                layout: item.layout\n              }\"\n            ></form-group>\n          </ng-container>\n        </content-wrapper>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-container>\n" }]
        }], propDecorators: { configs: [{
                type: Input
            }], collapsibleState: [{
                type: Input
            }], parentId: [{
                type: Input
            }], parentForm: [{
                type: Input
            }], rootClass: [{
                type: Input
            }], rootStyles: [{
                type: Input
            }], formGroupRefs: [{
                type: ViewChildren,
                args: [FormGroupComponent]
            }], formControlRefs: [{
                type: ViewChildren,
                args: [FormControlComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { CommonModule } from '@angular/common';
import { Component, Input, inject } from '@angular/core';
import { ControlLayoutDirective } from '../../directives/control-layout.directive';
import { IsControlRequiredPipe } from '../../pipes/is-control-required.pipe';
import { GlobalVariableService } from '../../services/global-variable.service';
import { ErrorMessageComponent } from '../error-message/error-message.component';
import { FormLabelComponent } from '../form-label/form-label.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
class ContentWrapperComponent {
    constructor() {
        this._globalVariableService = inject(GlobalVariableService);
        this.descriptionPosition = this._globalVariableService.descriptionPosition;
        this.hideErrors$ = this._globalVariableService.hideErrorMessage$;
        this.showErrorsOnTouched = this._globalVariableService.showErrorsOnTouched;
        this.errorComponents = this._globalVariableService.errorComponents;
        this.errorTemplates = this._globalVariableService.errorTemplates;
        this.errorComponentDefault = this._globalVariableService.errorComponentDefault;
        this.errorTemplateDefault = this._globalVariableService.errorTemplateDefault;
        this.labelComponents = this._globalVariableService.labelComponents;
        this.labelTemplates = this._globalVariableService.labelTemplates;
        this.labelComponentDefault = this._globalVariableService.labelComponentDefault;
        this.labelTemplateDefault = this._globalVariableService.labelTemplateDefault;
        this.renderErrorSection = (() => {
            const typesToHide = this._globalVariableService.hideErrorsForTypes ?? [];
            const type = this.config?.type ?? 'text';
            return typesToHide.filter(Boolean).every((x) => x !== type);
        })();
    }
    get showErrors() {
        const controlTouched = this.control?.touched ?? false;
        const controlDirty = this.control?.dirty ?? false;
        const hasErrors = !!this.control?.errors;
        if (!hasErrors) {
            return false;
        }
        if (this.hideErrors$.value === false) {
            return true;
        }
        if (this.showErrorsOnTouched) {
            return controlTouched || controlDirty;
        }
        return controlDirty;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: ContentWrapperComponent, isStandalone: true, selector: "content-wrapper", inputs: { config: "config", control: "control", collapsibleState: "collapsibleState" }, ngImport: i0, template: "<ng-container *ngIf=\"config && control\">\n  <!-- Label -->\n  <ng-container *ngIf=\"!config.layout?.hideLabel && config.label\">\n    <form-label\n      [label]=\"config.label\"\n      [layout]=\"config.layout\"\n      [props]=\"config.props\"\n      [collapsibleEl]=\"collapsibleEl\"\n      [customComponent]=\"labelComponents?.[config.formControlName] ?? labelComponentDefault\"\n      [customTemplate]=\"labelTemplates?.[config.formControlName] ?? labelTemplateDefault\"\n      [state]=\"collapsibleState\"\n      [controlLayout]=\"{\n        type: 'label',\n        layout: config.layout\n      }\"\n      [ngClass]=\"{\n        required:\n          config.layout?.autoAddRequiredClass === false\n            ? null\n            : (control | isControlRequired)\n      }\"\n    ></form-label>\n  </ng-container>\n\n  <div\n    #collapsibleEl\n    [controlLayout]=\"{\n      type: 'content',\n      layout: config.layout\n    }\"\n  >\n    <!-- Description (before) -->\n    <ng-container\n      *ngIf=\"\n        config.description &&\n        (config.layout?.descriptionPosition ?? descriptionPosition) !== 'after'\n      \"\n      [ngTemplateOutlet]=\"descriptionTemplate\"\n      [ngTemplateOutletContext]=\"{ data: config }\"\n    ></ng-container>\n\n    <ng-content></ng-content>\n\n    <!-- Validation message -->\n    <ng-container *ngIf=\"renderErrorSection\">\n      <error-message\n        [control]=\"control\"\n        [validators]=\"\n          (config.validators ?? []).concat(config.asyncValidators ?? [])\n        \"\n        [customComponent]=\"errorComponents?.[config.formControlName] ?? errorComponentDefault\"\n        [customTemplate]=\"errorTemplates?.[config.formControlName] ?? errorTemplateDefault\"\n        [controlLayout]=\"{\n          type: 'error',\n          layout: config.layout\n        }\"\n        [ngClass]=\"{\n          hidden: !showErrors\n        }\"\n      ></error-message>\n    </ng-container>\n\n    <!-- Description (after) -->\n    <ng-container\n      *ngIf=\"\n        config.description &&\n        (config.layout?.descriptionPosition ?? descriptionPosition) === 'after'\n      \"\n      [ngTemplateOutlet]=\"descriptionTemplate\"\n      [ngTemplateOutletContext]=\"{ data: config }\"\n    ></ng-container>\n  </div>\n</ng-container>\n\n<!-- Description template -->\n<ng-template #descriptionTemplate let-data=\"data\">\n  <span\n    class=\"form-description\"\n    [ngClass]=\"{\n      'position-after':\n        (data.layout?.descriptionPosition ?? descriptionPosition) === 'after'\n    }\"\n    [controlLayout]=\"{\n      type: 'description',\n      layout: data.layout\n    }\"\n    >{{ data.description }}</span\n  >\n</ng-template>\n", dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: FormLabelComponent, selector: "form-label", inputs: ["label", "layout", "props", "collapsibleEl", "state", "customComponent", "customTemplate"] }, { kind: "component", type: ErrorMessageComponent, selector: "error-message", inputs: ["control", "validators", "customComponent", "customTemplate"] }, { kind: "directive", type: ControlLayoutDirective, selector: "[controlLayout]", inputs: ["controlLayout"] }, { kind: "pipe", type: IsControlRequiredPipe, name: "isControlRequired" }] }); }
}
export { ContentWrapperComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: ContentWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'content-wrapper', standalone: true, imports: [
                        CommonModule,
                        FormLabelComponent,
                        ErrorMessageComponent,
                        ControlLayoutDirective,
                        IsControlRequiredPipe,
                    ], template: "<ng-container *ngIf=\"config && control\">\n  <!-- Label -->\n  <ng-container *ngIf=\"!config.layout?.hideLabel && config.label\">\n    <form-label\n      [label]=\"config.label\"\n      [layout]=\"config.layout\"\n      [props]=\"config.props\"\n      [collapsibleEl]=\"collapsibleEl\"\n      [customComponent]=\"labelComponents?.[config.formControlName] ?? labelComponentDefault\"\n      [customTemplate]=\"labelTemplates?.[config.formControlName] ?? labelTemplateDefault\"\n      [state]=\"collapsibleState\"\n      [controlLayout]=\"{\n        type: 'label',\n        layout: config.layout\n      }\"\n      [ngClass]=\"{\n        required:\n          config.layout?.autoAddRequiredClass === false\n            ? null\n            : (control | isControlRequired)\n      }\"\n    ></form-label>\n  </ng-container>\n\n  <div\n    #collapsibleEl\n    [controlLayout]=\"{\n      type: 'content',\n      layout: config.layout\n    }\"\n  >\n    <!-- Description (before) -->\n    <ng-container\n      *ngIf=\"\n        config.description &&\n        (config.layout?.descriptionPosition ?? descriptionPosition) !== 'after'\n      \"\n      [ngTemplateOutlet]=\"descriptionTemplate\"\n      [ngTemplateOutletContext]=\"{ data: config }\"\n    ></ng-container>\n\n    <ng-content></ng-content>\n\n    <!-- Validation message -->\n    <ng-container *ngIf=\"renderErrorSection\">\n      <error-message\n        [control]=\"control\"\n        [validators]=\"\n          (config.validators ?? []).concat(config.asyncValidators ?? [])\n        \"\n        [customComponent]=\"errorComponents?.[config.formControlName] ?? errorComponentDefault\"\n        [customTemplate]=\"errorTemplates?.[config.formControlName] ?? errorTemplateDefault\"\n        [controlLayout]=\"{\n          type: 'error',\n          layout: config.layout\n        }\"\n        [ngClass]=\"{\n          hidden: !showErrors\n        }\"\n      ></error-message>\n    </ng-container>\n\n    <!-- Description (after) -->\n    <ng-container\n      *ngIf=\"\n        config.description &&\n        (config.layout?.descriptionPosition ?? descriptionPosition) === 'after'\n      \"\n      [ngTemplateOutlet]=\"descriptionTemplate\"\n      [ngTemplateOutletContext]=\"{ data: config }\"\n    ></ng-container>\n  </div>\n</ng-container>\n\n<!-- Description template -->\n<ng-template #descriptionTemplate let-data=\"data\">\n  <span\n    class=\"form-description\"\n    [ngClass]=\"{\n      'position-after':\n        (data.layout?.descriptionPosition ?? descriptionPosition) === 'after'\n    }\"\n    [controlLayout]=\"{\n      type: 'description',\n      layout: data.layout\n    }\"\n    >{{ data.description }}</span\n  >\n</ng-template>\n" }]
        }], propDecorators: { config: [{
                type: Input
            }], control: [{
                type: Input
            }], collapsibleState: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
name: Pre-render docs content and deploy to GitHub pages

on:
  push:
    branches:
      - "v*" # Matches v1, v2, v3, etc.
      - "main" # Optional: keep main branch
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for version detection

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci

      - name: ⚙️ Run prerender pipeline
        run: npm run build:docs

      # Get major version from branch name
      - name: 🏷️ Get major version
        id: get_version
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "Current branch: $BRANCH_NAME"

          if [[ $BRANCH_NAME =~ ^v[0-9]+$ ]]; then
            # Branch name is already in format v1, v2, etc.
            VERSION=$BRANCH_NAME
            echo "Using branch name as version: $VERSION"
          elif [[ $BRANCH_NAME == "main" ]]; then
            # For main branch, try to get version from lib/package.json or git tag
            if [ -f "lib/package.json" ]; then
              FULL_VERSION=$(node -p "require('./lib/package.json').version" 2>/dev/null || echo "")
              echo "Full version from lib/package.json: $FULL_VERSION"
              if [[ -n "$FULL_VERSION" && "$FULL_VERSION" != "undefined" ]]; then
                MAJOR_VERSION=$(echo $FULL_VERSION | cut -d. -f1)
                VERSION="v$MAJOR_VERSION"
                echo "Extracted major version from lib/package.json: $VERSION"
              else
                echo "Could not read version from lib/package.json, trying git tags..."
                FULL_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "")
                if [[ -n "$FULL_VERSION" ]]; then
                  MAJOR_VERSION=$(echo $FULL_VERSION | cut -d. -f1)
                  VERSION="v$MAJOR_VERSION"
                  echo "Extracted major version from git tag: $VERSION"
                else
                  echo "No git tags found, defaulting to v1"
                  VERSION="v1"
                fi
              fi
            else
              echo "No lib/package.json found, trying git tags..."
              FULL_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "")
              if [[ -n "$FULL_VERSION" ]]; then
                MAJOR_VERSION=$(echo $FULL_VERSION | cut -d. -f1)
                VERSION="v$MAJOR_VERSION"
                echo "Extracted major version from git tag: $VERSION"
              else
                echo "No git tags found, defaulting to v1"
                VERSION="v1"
              fi
            fi
          else
            # Fallback: extract version from branch name or use branch name
            VERSION=$(echo $BRANCH_NAME | grep -oE 'v[0-9]+' || echo "v1")
            echo "Fallback version: $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Final detected major version: $VERSION"

      # Setup major versioned directory structure and fix asset paths
      - name: 📁 Setup versioned docs
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          mkdir -p ./versioned-docs/$VERSION
          cp -r ./dist/docs/browser/* ./versioned-docs/$VERSION/

          # Get the repository name for proper path construction
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          echo "Repository name: $REPO_NAME"
          echo "Version: $VERSION"

          # Fix asset paths in HTML files to work with versioned folders
          echo "Fixing asset paths for version: $VERSION"

          # Fix paths that already contain repo name: "/repo-name/" to "/repo-name/version/"
          find ./versioned-docs/$VERSION -name "*.html" -type f -exec sed -i "s|src=\"/$REPO_NAME/|src=\"/$REPO_NAME/$VERSION/|g" {} \;
          find ./versioned-docs/$VERSION -name "*.html" -type f -exec sed -i "s|href=\"/$REPO_NAME/|href=\"/$REPO_NAME/$VERSION/|g" {} \;
          find ./versioned-docs/$VERSION -name "*.html" -type f -exec sed -i "s|url(/$REPO_NAME/|url(/$REPO_NAME/$VERSION/|g" {} \;

          # Fix generic absolute paths: "/" to "/repo-name/version/" (for paths that don't already have repo name)
          find ./versioned-docs/$VERSION -name "*.html" -type f -exec sed -i "s|src=\"/\([^/]\)|src=\"/$REPO_NAME/$VERSION/\1|g" {} \;
          find ./versioned-docs/$VERSION -name "*.html" -type f -exec sed -i "s|href=\"/\([^/]\)|href=\"/$REPO_NAME/$VERSION/\1|g" {} \;

          # Fix CSS files
          find ./versioned-docs/$VERSION -name "*.css" -type f -exec sed -i "s|url(/$REPO_NAME/|url(/$REPO_NAME/$VERSION/|g" {} \;
          find ./versioned-docs/$VERSION -name "*.css" -type f -exec sed -i "s|url(/\([^/]\)|url(/$REPO_NAME/$VERSION/\1|g" {} \;

          # Fix JS files
          find ./versioned-docs/$VERSION -name "*.js" -type f -exec sed -i "s|'/$REPO_NAME/|'/$REPO_NAME/$VERSION/|g" {} \;
          find ./versioned-docs/$VERSION -name "*.js" -type f -exec sed -i "s|\"/$REPO_NAME/|\"/$REPO_NAME/$VERSION/|g" {} \;
          find ./versioned-docs/$VERSION -name "*.js" -type f -exec sed -i "s|'/\([^/]\)|'/$REPO_NAME/$VERSION/\1|g" {} \;
          find ./versioned-docs/$VERSION -name "*.js" -type f -exec sed -i "s|\"/\([^/]\)|\"/$REPO_NAME/$VERSION/\1|g" {} \;

          echo "Asset path fixing complete"

          # Create or update root index.html that redirects to latest major version
          cat > ./versioned-docs/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <title>Documentation</title>
            <meta http-equiv="refresh" content="0; url=./$VERSION/">
            <link rel="canonical" href="./$VERSION/">
          </head>
          <body>
            <p>Redirecting to <a href="./$VERSION/">latest documentation ($VERSION)</a>...</p>
          </body>
          </html>
          EOF

          # Create 404.html from the versioned index
          cp ./versioned-docs/$VERSION/index.html ./versioned-docs/404.html

      # Preserve existing major versions from gh-pages branch
      - name: 🔄 Preserve existing versions
        run: |
          # Create a temporary directory for existing content
          mkdir -p ./temp-existing

          # Check if gh-pages branch exists
          if git ls-remote --heads origin gh-pages | grep -q gh-pages; then
            echo "gh-pages branch exists, fetching existing versions..."
            git fetch origin gh-pages
            
            # Create a temporary branch to access gh-pages content safely
            git checkout -b temp-gh-pages origin/gh-pages 2>/dev/null || {
              echo "Failed to checkout gh-pages, continuing without preserving versions"
              git checkout main
              exit 0
            }
            
            # Copy existing major version folders (but not root files)
            for dir in v*; do
              if [ -d "$dir" ] && [ "$dir" != "${{ steps.get_version.outputs.version }}" ]; then
                echo "Preserving existing major version: $dir"
                cp -r "$dir" ./temp-existing/
              fi
            done
            
            # Switch back to original branch and clean up
            git checkout ${GITHUB_REF#refs/heads/}
            git branch -D temp-gh-pages 2>/dev/null || true
          else
            echo "gh-pages branch doesn't exist yet. This might be the first deployment."
          fi

          # Copy preserved versions to versioned-docs (if any exist)
          if [ -d "./temp-existing" ] && [ "$(ls -A ./temp-existing 2>/dev/null)" ]; then
            echo "Copying preserved versions..."
            cp -r ./temp-existing/* ./versioned-docs/ 2>/dev/null || true
          else
            echo "No existing versions to preserve."
          fi

          # List all major versions for debugging
          echo "Available major versions after preservation:"
          ls -la ./versioned-docs/

      - name: ⚙️ Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: 📤 Upload versioned artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./versioned-docs"

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
